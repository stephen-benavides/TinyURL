using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TinyURLPOC.Data;
using TinyURLPOC.Helpers;
using TinyURLPOC.Models;
using TinyURLPOC.Parser;

namespace TinyURLPOC.Controllers 
{

    public class URLsController 

    {
        #region Properties

        //no mocking DB with moq as is internal test setup - test DB instance
        private DataBaseHelper DataBase { get; set; }
        private ParseUrl ParseUrl { get; set; }
        private IURLEncoding<string> Encoder { get; set; }
        private UrlRepository UrlRepository { get; set; }

        private UrlMapping UrlMapping { get; set; }

        #endregion

        public URLsController(IURLEncoding<string> encoder)
        {
            #region Properties Initialization

            DataBase = new DataBaseHelper();
            //this.DataBase = DataBase;
            this.Encoder = encoder;
            ParseUrl = new ParseUrl(Encoder);
            UrlRepository = new UrlRepository(DataBase);
            UrlMapping = new UrlMapping();
            //this.UrlMapping = UrlMapping;

            #endregion
        }

        #region GetShortUrl
        /// <summary>
        /// Create short URL using a long URL as the input parameter
        /// </summary>
        /// <param name="userInput">Original / Long URL</param>
        /// <returns></returns>
        public string GetShortUrl(string userInput)
        {
            //Validate input comming in from the user 
            UserInputValidation validation = new UserInputValidation();

            if (!validation.IsValidUrl(userInput))
            {
                Console.WriteLine("Input is not valid");
                return null;
            }

            Console.WriteLine("Valid User Input");

            //Check if the shortened URL exists in memory already
            var repoOriginalUrlInDB = UrlRepository.GetById(userInput);

            //If value exists, returned the auto generated shortened URL
            if (repoOriginalUrlInDB != null)
            {
                Console.WriteLine("Already Exists in DB");
                return repoOriginalUrlInDB.AutoGeneratedUrl;
            }

            //Else is a new record - add
            var encodedUrl = ParseUrl.EncodeUrl(userInput);

            UrlMapping.OriginalUrl = userInput;
            UrlMapping.AutoGeneratedUrl = ParseUrl.GetTinyUrl(encodedUrl);
            //add to db the original url
            UrlRepository.Add(UrlMapping);
            Console.WriteLine("Added");
            return UrlMapping.AutoGeneratedUrl;

        }


        #endregion

        #region GetShortUrlUsingAlias

        /// <summary>
        /// Create a short url using a valid alias
        /// </summary>
        /// <param name="userInput">Original URL</param>
        /// <param name="alias">User Input Alias</param>
        /// <returns></returns>
        public string GetShortUrlUsingAlias(string userInput, string userInputAlias)
        {
            //Validate input comming in from the user 
            UserInputValidation validation = new UserInputValidation();

            if (!validation.IsValidUrl(userInput))
            {
                Console.WriteLine("Input/URL is not valid");
                return null;
            }

            //check if alias is valid (input validation)
            if (!validation.IsValidAlias(userInputAlias))
            {
                Console.WriteLine("Alias is not Valid");
                return null;
            }

            Console.WriteLine("Valid User Input");




            //Check if the alias exists in memory already
            var repoOriginalUrlInDB = UrlRepository.GetAliasById(userInputAlias);
            if (!string.IsNullOrEmpty(repoOriginalUrlInDB))
            {
                Console.WriteLine("Already Exists in DB. Try a different alias");
                return null;
            }

            //New Record
            Alias alias = new Alias()
            {
                Name = userInputAlias,
                EncodedName = ParseUrl.GetTinyUrl(userInputAlias)
            };
            UrlMapping.Alias.Add(alias);
            UrlMapping.OriginalUrl = userInput;
            //UrlMapping.AutoGeneratedUrl = ParseUrl.GetTinyUrl(userInputAlias);

            //Add to DB the original url and the alias
            UrlRepository.Add(UrlMapping, alias);
            Console.WriteLine("Added");

            //return the user input added to the DB 
            string encodedNameFromObject = string.Empty;
            try
            {
                encodedNameFromObject = UrlMapping.Alias.FirstOrDefault(n => n.Name.Equals(userInputAlias)).EncodedName;
            }
            catch (Exception e)
            {
                Console.WriteLine("Issue at URLs Controller - GetShortUrlUsingAlias - encodedNameFromObject");
                Console.WriteLine(e.Message);
                return null;
            }

            return encodedNameFromObject;
        }

        #endregion

        #region GetLongUrl

        /// <summary>
        /// Retrieve long url using either the autogenerated url or the alias
        /// </summary>
        /// <returns></returns>
        public string GetLongUrl(string userInput)
        {
            int index = 0;
            //Check if the long URL exists on Both, the autogeneratedURl or the Alias 
            
            //Validate input comming in from the user 
            UserInputValidation validation = new UserInputValidation();

            if (!validation.IsValidUrl(userInput))
            {
                Console.WriteLine("Input/URL is not valid");
                return null;
            }

            
            Console.WriteLine("Valid User Input");
            var originalUrlCallsDB = DataBase.UrlMappingsCalls;

            //Check the alias DB
            var aliasDB = DataBase.Aliases;
            var hasAlias = aliasDB.ContainsKey(userInput);
            if (hasAlias)
            {
                originalUrlCallsDB.Add(aliasDB[userInput], ++index);
                return aliasDB[userInput];
            }
                

            //Else check the URLs DB
            var originalUrlDB = DataBase.URLMappings;
            bool hasAutoGeneratedUrl = false;
            try
            {
                 hasAutoGeneratedUrl = originalUrlDB.Any(kv => kv.Value.AutoGeneratedUrl.Equals(userInput));
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
           
            if (hasAutoGeneratedUrl)
            {
                string originalUrlKey = string.Empty;
                try
                {
                    originalUrlKey = originalUrlDB.Where(n => n.Value.AutoGeneratedUrl.Equals(userInput)).Select(n => n.Key).FirstOrDefault();
                    originalUrlCallsDB.Add(originalUrlDB[originalUrlKey].OriginalUrl, ++index);

                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }

                return originalUrlKey;
            }

            return null;
        }

        #endregion

        #region GetOriginalUrlCalls

        /// <summary>
        /// Returns number of times a long URL has been retrieved
        /// </summary>
        /// <param name="userInput"></param>
        /// <returns></returns>
        public int GetOriginalUrlCalls(string userInput)
        {
            UserInputValidation validation = new UserInputValidation();

            if (!validation.IsValidUrl(userInput))
            {
                Console.WriteLine("Input/URL is not valid");
                return 0;
            }

            return DataBase.UrlMappingsCalls.Count;
        }

        #endregion

        #region MyRegion

        /// <summary>
        /// Delete long URLS associated 
        /// </summary>
        /// <param name="shortUrl"> TinyUrl</param>
        public bool DeleteLongUrl(string shortUrl)
        {
            //Check if the long URL exists on Both, the autogeneratedURl or the Alias 

            //Validate input comming in from the user 
            UserInputValidation validation = new UserInputValidation();

            if (!validation.IsValidUrl(shortUrl))
            {
                Console.WriteLine("Input/URL is not valid");
                return false;
            }


            Console.WriteLine("Valid User Input");

            var originalUrlDB = DataBase.URLMappings;

            //Check the alias DB
            var aliasDB = DataBase.Aliases;
            var isInAlias = aliasDB.ContainsKey(shortUrl);
            if (isInAlias)
            {
                originalUrlDB.Remove(shortUrl);
                return true;
            }

            //Else check the URLs DB
            bool hasAutoGeneratedUrl = false;
            try
            {
                hasAutoGeneratedUrl = originalUrlDB.Any(kv => kv.Value.AutoGeneratedUrl.Equals(shortUrl));
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
             
            if (hasAutoGeneratedUrl)
            {
                string originalUrlKey = string.Empty;
                try
                {
                    originalUrlKey = originalUrlDB.Where(n => n.Value.AutoGeneratedUrl.Equals(shortUrl)).Select(n => n.Key).FirstOrDefault();
                    originalUrlDB.Remove(originalUrlKey);

                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }

                return true;
            }

            return false;
        }

        #endregion
    }
}
