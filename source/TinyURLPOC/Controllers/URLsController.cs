using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TinyURLPOC.Data;
using TinyURLPOC.Helpers;
using TinyURLPOC.Models;
using TinyURLPOC.Parser;
using TinyURLPOC.Services;

namespace TinyURLPOC.Controllers 
{

    public class URLsController 

    {
        #region Properties

        //no mocking DB with moq as is internal test setup - test DB instance
        
        private DataBaseHelper DataBase { get; set; }
        private ParseUrl ParseUrl { get; set; }
        private IURLEncoding<string> Encoder { get; set; }

        private UrlMapping UrlMapping { get; set; }
        private UrlServices _UrlServices { get; set; }
        private AliasServices _AliasServices { get; set; }
        #endregion

        public URLsController(IURLEncoding<string> encoder)
        {
            #region Properties Initialization
            DataBase = new DataBaseHelper();
            this.Encoder = encoder;
            ParseUrl = new ParseUrl(Encoder);
            UrlMapping = new UrlMapping();
            _UrlServices = new UrlServices(DataBase);
            _AliasServices = new AliasServices(DataBase);

            #endregion
        }

        #region GetShortUrl
        /// <summary>
        /// Create short URL using a long URL as the input parameter
        /// </summary>
        /// <param name="userInput">Original / Long URL</param>
        /// <returns></returns>
        public string GetShortUrl(string userInput)
        {
            //Validate input comming in from the user 
            UserInputValidation validation = new UserInputValidation();

            if (!validation.IsValidUrl(userInput))
            {
                Console.WriteLine("Input is not valid");
                return null;
            }

            Console.WriteLine("Valid User Input");

            //Check if the shortened URL exists in memory already
            var repoOriginalUrlInDB = _UrlServices.GetById(userInput);

            //If value exists, returned the auto generated shortened URL
            if (repoOriginalUrlInDB != null)
            {
                Console.WriteLine("Already Exists in DB");
                return repoOriginalUrlInDB.AutoGeneratedUrl;
            }

            //Else is a new record - add
            UrlMapping.OriginalUrl = userInput;
            UrlMapping.AutoGeneratedUrl = ParseUrl.EncodeUrl(userInput);
            //add to db the original url
            _UrlServices.Add(UrlMapping);
            Console.WriteLine("Added");
            return ParseUrl.GetTinyUrl(UrlMapping.AutoGeneratedUrl);

        }

        #endregion

        #region GetShortUrlUsingAlias

        /// <summary>
        /// Create a short url using a valid alias
        /// </summary>
        /// <param name="userInput">Original URL</param>
        /// <param name="alias">User Input Alias</param>
        /// <returns></returns>
        public string GetShortUrlUsingAlias(string userInput, string userInputAlias)
        {
            //Validate input comming in from the user 
            UserInputValidation validation = new UserInputValidation();

            if (!validation.IsValidUrl(userInput))
            {
                Console.WriteLine("Input/URL is not valid");
                return null;
            }

            //check if alias is valid (input validation)
            if (!validation.IsValidAlias(userInputAlias))
            {
                Console.WriteLine("Alias is not Valid");
                return null;
            }

            Console.WriteLine("Valid User Input");


            //Check if the alias exists in memory already
            var repoOriginalUrlInDB = _AliasServices.GetById(userInputAlias);
            if (!string.IsNullOrEmpty(repoOriginalUrlInDB))
            {
                Console.WriteLine("Already Exists in DB. Try a different alias");
                return null;
            }


            //New Valid Alias
            Alias alias = new Alias()
            {
                Name = userInputAlias,
                //EncodedName = ParseUrl.GetTinyUrl(userInputAlias)
            };

            //Check if the original URL already exists in the DB
            var existingUrlMappingObject = _UrlServices.GetById(userInput);
            if (existingUrlMappingObject != null)
            {
                //Add new alias into URL Mappings 
                _UrlServices.UpdateUrlMappingWithAlias(existingUrlMappingObject, alias);

                //Add the new record in the AliasDB
                _AliasServices.Add(userInputAlias, userInput);
            }

            //New Record
            UrlMapping.Alias.Add(alias);
            UrlMapping.OriginalUrl = userInput;
            _UrlServices.Add(UrlMapping);
            _AliasServices.Add(userInputAlias, userInput);
            
            Console.WriteLine("Added");

            return ParseUrl.GetTinyUrl(alias.Name);
        }

        #endregion

        #region GetLongUrl

        /// <summary>
        /// Retrieve long url using the TinyURL 
        /// </summary>
        /// <returns></returns>
        public string GetLongUrl(string userInput)
        {
            //Check User Input 
            //Validate input comming in from the user 
            UserInputValidation validation = new UserInputValidation();


            //Check if its a correct TinyUrl Format
            if (!validation.IsValidTinyUrl(userInput))
            {
                Console.WriteLine("Invalid Tiny Url");
                return null;
            }

            Console.WriteLine("Valid Tiny Url");

            //Get the URI of the TinyURL
            var tinyUrlURI = ParseUrl.DecodeTinyUrl(userInput);


            //Check if exists in the Alias DB
            var originalUrlInAliasDB = _AliasServices.GetById(tinyUrlURI);
            if (!string.IsNullOrEmpty(originalUrlInAliasDB))
            {
                //Increment URL Mapping count for the invoked Original URL
                _UrlServices.IncreaseUrlMappingCount(originalUrlInAliasDB);
                return originalUrlInAliasDB;
            }
                

            //If not - Check if it the input is autogenerated - check URL DB
            var originalUrlInUrlMappingDB = _UrlServices.GetOriginalUrlByTinyUrl(tinyUrlURI);
            if (!string.IsNullOrEmpty(originalUrlInUrlMappingDB))
            {
                //Increment URL Mapping count for the invoked Original URL
                _UrlServices.IncreaseUrlMappingCount(originalUrlInUrlMappingDB);
                return originalUrlInUrlMappingDB;
            }
            
            //Return null - it does not exist
            return null;
        }

        #endregion

        #region GetOriginalUrlCalls

        /// <summary>
        /// Returns number of times a long URL has been retrieved
        /// </summary>
        /// <param name="OriginalUrl">Long URL</param>
        /// <returns></returns>
        public int GetOriginalUrlCount(string OriginalUrl)
        {
            //Validate input comming in from the user 
            UserInputValidation validation = new UserInputValidation();

            if (!validation.IsValidUrl(OriginalUrl))
            {
                Console.WriteLine("Input is not valid");
                return 0;
            }

            Console.WriteLine("Valid User Input");
            //Return the number of times the long URL has been retrieved
            int count = _UrlServices.GetUrlMappingCount(OriginalUrl);
            Console.WriteLine("Number of times retrieved so far: {0}", count);
            return count;
        }

        #endregion

        #region MyRegion

        /// <summary>
        /// Delete long URLS associated with the short URLs
        /// </summary>
        /// <param name="shortUrl"> TinyUrl</param>
        public bool DeleteLongUrl(string shortUrl)
        {

            //Check User Input 
            //Validate input comming in from the user 
            UserInputValidation validation = new UserInputValidation();


            //Check if its a correct TinyUrl Format
            if (!validation.IsValidTinyUrl(shortUrl))
            {
                Console.WriteLine("Invalid Tiny Url");
                return false;
            }

            Console.WriteLine("Valid Http Url");

            //Get the URI of the TinyURL
            var tinyUrlURI = ParseUrl.DecodeTinyUrl(shortUrl);


            //Check if exists in the Alias DB
            var originalUrlInAliasDB = _AliasServices.GetById(tinyUrlURI);
            if (!string.IsNullOrEmpty(originalUrlInAliasDB))
            {
                //remove from the URL Mapping and Alias FB
                _UrlServices.Remove(originalUrlInAliasDB);
                _AliasServices.Remove(tinyUrlURI);
                return true;
            }


            //If not - Check if it the input is autogenerated - check URL DB
            var originalUrlInUrlMappingDB = _UrlServices.GetOriginalUrlByTinyUrl(tinyUrlURI);
            if (!string.IsNullOrEmpty(originalUrlInUrlMappingDB))
            {
                //remove from the URL Mapping and Alias FB
                _UrlServices.Remove(originalUrlInUrlMappingDB);
                _AliasServices.RemoveAliasAssociatedWithOriginalUrl(originalUrlInUrlMappingDB);
                return true;
            }

            //Return null - it does not exist
            Console.WriteLine("The record you want to delete does not exist");
            return false;
        }

        #endregion
    }
}
