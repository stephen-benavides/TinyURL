using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;
using TinyURLPOC.Data;
using TinyURLPOC.Helpers;
using TinyURLPOC.Models;

namespace TinyURLPOC.Services
{
    internal class UrlServices
    {
        private DataBaseHelper _dataBase;
        private UrlRepository UrlRepository { get; set; }
        public UrlServices(DataBaseHelper dataBase)
        {
            _dataBase = dataBase;
            UrlRepository = new UrlRepository(_dataBase);
        }

        /// <summary>
        /// Retrieve the URL object, inclduing autogenerated URL associated with the original url
        /// </summary>
        /// <param name="userInput">Original URL</param>
        /// <returns></returns>
        public UrlMapping GetById(string userInput)
        {
            return UrlRepository.GetById(userInput);
        }
        
        /// <summary>
        /// Add new object into the URL Mapping DB
        /// </summary>
        /// <param name="obj">Original URL</param>
        public void Add(UrlMapping obj)
        {
            UrlRepository.Add(obj);
        }

        /// <summary>
        /// Remove the records associated with the original URL 
        /// </summary>
        /// <param name="key">URL Mapping DB Key</param>
        /// <returns>true if the record exists in the DB and it has been removed</returns>
        public bool Remove(string originalUrl)
        {
            return UrlRepository.Remove(originalUrl);
        }

        /// <summary>
        /// Updates the existing urlMapping list of alias with a new alias 
        /// </summary>
        /// <param name="urlMapping"></param>
        /// <param name="alias"></param>
        /// <returns></returns>
        public bool UpdateUrlMappingWithAlias(UrlMapping urlMapping, Alias alias)
        {
            try
            {
                urlMapping.Alias.Add(alias);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                return false;
            }

            return true;
        }
        /// <summary>
        /// Increment the Number of times retrieved and return the current count 
        /// </summary>
        /// <param name="urlMapping">long url</param>
        /// <returns>current number of times retrieved</returns>
        public bool IncreaseUrlMappingCount(string longUrl)
        {
            try
            {
                //retrieve current count in the DB
                var urlMappingObject = _dataBase.URLMappings[longUrl];
                //Incremeent the current count by 1
                urlMappingObject.NumberOfTimesRetrieved++;

            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                return false;
            }
            return true;
        }
        /// <summary>
        /// Get the total number of active counts for the URL Mapping object in DB associated with the original url
        /// </summary>
        /// <param name="longUrl">original URL</param>
        /// <returns></returns>
        public int GetUrlMappingCount(string longUrl)
        {
            try
            {
                return _dataBase.URLMappings[longUrl].NumberOfTimesRetrieved;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                Console.WriteLine("Does not exist in the URL Mapping DB");
                return 0;
            }
        }

        /// <summary>
        /// Get the LongUrl associated with the autogenerated URL
        /// </summary>
        /// <param name="tinyUrlURI"></param>
        public string GetOriginalUrlByTinyUrl(string tinyUrlURI)
        {
            try
            {
                var uniqueKeyValuePair = _dataBase.URLMappings.FirstOrDefault(k => k.Value.AutoGeneratedUrl.Equals(tinyUrlURI));
                return uniqueKeyValuePair.Key;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                Console.WriteLine("The key does not exist in the URL Map");
                return null;
            }
            
        }

    }
}
